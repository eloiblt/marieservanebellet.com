name: CI - CD

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment: Production
    permissions: write-all
    outputs:
      image_tag: ${{ steps.version.outputs.TAG }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u eloiblt --password-stdin

      - name: Extract version
        id: version
        run: echo "TAG=${GITHUB_REF##*/}" >> "$GITHUB_OUTPUT"

      - name: Write version
        working-directory: ./docker/prod
        run: echo "IMAGE_TAG=${{ steps.version.outputs.TAG }}" > .env

      - name: Build the stack
        working-directory: ./docker/prod
        run:
          docker compose -f docker-compose.build.yml build

      - name: Push the stack
        working-directory: ./docker/prod
        run: docker compose -f docker-compose.build.yml push

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - uses: actions/checkout@v4

      - name: docker login, pull, and up
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_IP }}
          username: ${{ secrets.VPS_USERNAME }}
          port: ${{ secrets.VPS_PORT }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            echo ${{ secrets.GITHUB_TOKEN }} | docker login https://ghcr.io -u eloiblt --password-stdin

            cd ~/my-server/marieservanebellet.com
            rm -f .env
            touch .env

            echo "SMTP_HOST=${{ secrets.SMTP_HOST }}" >> .env
            echo "SMTP_PORT=${{ secrets.SMTP_PORT }}" >> .env
            echo "SMTP_TLS=${{ secrets.SMTP_TLS }}" >> .env
            echo "SMTP_USER=${{ secrets.SMTP_USER }}" >> .env
            echo "SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }}" >> .env

            echo "MAIL_TO=${{ secrets.MAIL_TO }}" >> .env
            echo "MAIL_BCC=${{ secrets.MAIL_BCC }}" >> .env

            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "FRONT_URL=${{ secrets.FRONT_URL }}" >> .env

            echo "IMAGE_TAG=${{ needs.build-and-push.outputs.image_tag }}" >> .env

            docker compose pull
            docker compose up -d --force-recreate

  notify-telegram:
    needs: deploy
    runs-on: ubuntu-latest
    environment: Production
    steps:
      - name: Send Telegram notification
        run: |
          TEXT=$(cat <<EOF
          *✅ MSB déployé avec succès ✅*

          *Workflow*: [${{ github.workflow }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          *Repository*: \`${{ github.repository }}\`
          *Branch*: \`${{ github.ref_name }}\`
          EOF
          )

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" \
            -d chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" \
            -d parse_mode="MarkdownV2" \
            --data-urlencode text="$TEXT"

          echo "Notification sent to Telegram"